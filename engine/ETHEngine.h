/*-----------------------------------------------------------------------

 Ethanon Engine (C) Copyright 2009-2011 Andre Santee
 http://www.asantee.net/ethanon/

    This file is part of Ethanon Engine.

    Ethanon Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Ethanon Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Ethanon Engine. If not, see
    <http://www.gnu.org/licenses/>.

-----------------------------------------------------------------------*/

#ifndef _ETH_ENGINE_H_
#define _ETH_ENGINE_H_

#include "../gs2d/src/gs2dframework.h"
#include "ETHResourceProvider.h"
#include "ETHScriptWrapper.h"
#include "ETHShaderManager.h"

#define _ETH_DYNAMIC_LIBRARY_LIST GS_L("plugin.list")
#define _ETH_DEFAULT_MAIN_SCRIPT_FILE (GS_L("main.angelscript"))

typedef bool (__cdecl *ETH_PLUGIN_PROC)(asIScriptEngine*);
#define _ETH_PLUGIN_FUNCTION_NAME GS_L("ETHCall")

namespace gs2d {

class ETHEngine : public gs2d::BaseApplication, public ETHScriptWrapper
{
	unsigned long m_lastFrameDeltaTimeMS;

	const str_type::string ETH_DEFAULT_MAIN_SCRIPT_FILE;
	const str_type::string ETH_DEFAULT_MAIN_BYTECODE_FILE;
	const str_type::string ETH_SCRIPT_MODULE;
	const str_type::string ETH_MAIN_FUNCTION;

	const bool m_testing, m_compileAndRun;

	const str_type::string m_startResourcePath;

	static asIScriptEngine *m_pASEngine;
	static void MessageCallback(const asSMessageInfo *msg);
	static bool CheckAngelScriptError(const int r, const str_type::string &description);

	ETHEngine &operator=(const ETHEngine &other);

	bool PrepareScriptingEngine();
	bool BuildModule();
	int GetMainFunctionId() const;
	bool RunLoopFunction() const;
	bool LoadNextSceneIfRequested();

	/// Saves a readme.txt file about the pre-compiled byte code generated by the machine
	void SaveByteCodeReadme(str_type::string path);
	void DrawTopLayer();

public:
	ETHEngine(const bool testing, const bool compileAndRun, const str_type::string& startResourcePath);
	~ETHEngine();
	void Start(gs2d::VideoPtr video, gs2d::InputPtr input, gs2d::AudioPtr audio);
	gs2d::Application::APP_STATUS Update(unsigned long lastFrameDeltaTimeMS); 
	void RenderFrame();
	void Destroy();

	ETHResourceProviderPtr GetProvider();
};

typedef boost::shared_ptr<ETHEngine> ETHEnginePtr;

} // namespace gs2d

#endif