/*-----------------------------------------------------------------------

 Ethanon Engine (C) Copyright 2009-2011 Andre Santee
 http://www.asantee.net/ethanon/

    This file is part of Ethanon Engine.

    Ethanon Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Ethanon Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Ethanon Engine. If not, see
    <http://www.gnu.org/licenses/>.

-----------------------------------------------------------------------*/

// sprite and screen properties
uniform float4x4 viewMatrix;
uniform float4x4 rotationMatrix;
uniform float2 screenSize;
uniform float2 size;
uniform float2 entityPos;
uniform float2 center;
uniform float2 bitmapSize;
uniform float2 rectPos;
uniform float2 rectSize;
uniform float2 scroll;
uniform float2 multiply;
uniform float4 color0;
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float2 flipAdd;
uniform float2 flipMul;
uniform float2 cameraPos;
uniform float depth;

uniform float2 parallaxOrigin;
uniform float parallaxIntensity;
uniform float3 entityPos3D;
float2 computeParallaxOffset()
{
	const float2 screenSpacePos = float2(entityPos3D.x, entityPos3D.y)-cameraPos;
	return ((screenSpacePos-parallaxOrigin)/screenSize.x)*entityPos3D.z*parallaxIntensity;
}

struct SPRITE_TRANSFORM
{
	float4 position;
	float2 vertPos;
};
SPRITE_TRANSFORM transformSprite_ppl(float3 position)
{
	SPRITE_TRANSFORM r;
	float4 newPos = float4(position, 1);
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);
	newPos = mul(rotationMatrix, newPos)+float4(entityPos,0,0);
	r.vertPos = newPos.xy/screenSize;

	// project the vertex on the screen
	newPos -= float4(screenSize/2,0,0)+float4(cameraPos,0,0);
	newPos += float4(computeParallaxOffset(),0,0);
	newPos *= float4(1,-1,1,1);
	r.position = mul(viewMatrix, newPos);
	return r;
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	float2 newCoord = texCoord * (rectSize/bitmapSize);
	newCoord += (rectPos/bitmapSize);
	return (newCoord+(scroll/bitmapSize))*multiply;
}

// main sprite program (with per-pixel lighting)
void sprite_ppl(float3 position : POSITION,
				float2 texCoord : TEXCOORD0,
				out float4 oPosition : POSITION,
				out float4 oColor    : COLOR0,
				out float2 oTexCoord : TEXCOORD0,
				out float3 oVertPos3D : TEXCOORD1,
				uniform float3 topLeft3DPos)
{
	SPRITE_TRANSFORM transform = transformSprite_ppl(position);

	transform.position.z = 1-depth;

	oPosition = transform.position;
	oVertPos3D = topLeft3DPos + (position*float3(size,1));
	oTexCoord = transformCoord(texCoord);
	oColor = color0;
}

// main sprite program for vertical entities
void verticalSprite_ppl(float3 position : POSITION,
				float2 texCoord : TEXCOORD0,
				out float4 oPosition : POSITION,
				out float4 oColor    : COLOR0,
				out float2 oTexCoord : TEXCOORD0,
				out float3 oVertPos3D : TEXCOORD1,
				uniform float3 topLeft3DPos,
				uniform float spaceLength)
{
	SPRITE_TRANSFORM transform = transformSprite_ppl(position);

	transform.position.z = (1-depth) - (((1-position.y)*rectSize.y)/spaceLength);

	oPosition = transform.position;
	oVertPos3D = topLeft3DPos + (float3(position.x,0,position.y)*float3(size.x,0,-size.y));
	oTexCoord = transformCoord(texCoord);
	oColor = color0;
}